// <auto-generated />
using System;
using Clinic.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Clinic.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20191029074949_ExampleData3")]
    partial class ExampleData3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Clinic.API.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Anamnesis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedOfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedOfficeId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Clinic.API.Models.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoursPerMonth")
                        .HasColumnType("int");

                    b.Property<Guid?>("MedAreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfMonths")
                        .HasColumnType("int");

                    b.Property<int>("SalaryPerMonth")
                        .HasColumnType("int");

                    b.Property<DateTime>("SignedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedAreaId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Clinic.API.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descriptcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Clinic.API.Models.Drug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("Clinic.API.Models.MedArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MedAreas");
                });

            modelBuilder.Entity("Clinic.API.Models.MedOffice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfficeNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("departmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("departmentId");

                    b.ToTable("MedOffices");
                });

            modelBuilder.Entity("Clinic.API.Models.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DrugId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DrugId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Clinic.API.Models.Referral", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("Referrals");
                });

            modelBuilder.Entity("Clinic.API.Models.Treatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("Clinic.API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pesel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Clinic.API.Models.Doctor", b =>
                {
                    b.HasBaseType("Clinic.API.Models.User");

                    b.HasDiscriminator().HasValue("Doctor");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1de2bec-cc76-443f-94f4-e45d58f870d8"),
                            City = "",
                            CreatedAt = new DateTime(2019, 10, 29, 7, 49, 48, 586, DateTimeKind.Utc).AddTicks(902),
                            Email = "user1@o2.pl",
                            FirstName = "Jan",
                            HouseNumber = "",
                            Password = "pass",
                            Pesel = "",
                            PhoneNumber = "",
                            PostCode = "",
                            Role = "doctor",
                            SecondName = "",
                            Street = ""
                        },
                        new
                        {
                            Id = new Guid("91ca47da-38d1-40e8-852d-b70d13d1abc3"),
                            City = "",
                            CreatedAt = new DateTime(2019, 10, 29, 7, 49, 48, 586, DateTimeKind.Utc).AddTicks(9665),
                            Email = "user1@o2.pl",
                            FirstName = "Jan",
                            HouseNumber = "",
                            Password = "pass",
                            Pesel = "",
                            PhoneNumber = "",
                            PostCode = "",
                            Role = "doctor",
                            SecondName = "Kowalski",
                            Street = ""
                        },
                        new
                        {
                            Id = new Guid("d259f930-0f3b-49f9-b050-499a8271127d"),
                            City = "",
                            CreatedAt = new DateTime(2019, 10, 29, 7, 49, 48, 586, DateTimeKind.Utc).AddTicks(9791),
                            Email = "user2@o2.pl",
                            FirstName = "Piotr",
                            HouseNumber = "",
                            Password = "pass",
                            Pesel = "",
                            PhoneNumber = "",
                            PostCode = "",
                            Role = "doctor",
                            SecondName = "Nowak",
                            Street = ""
                        },
                        new
                        {
                            Id = new Guid("c9f61e9b-1c9c-482d-b759-c0682526b2ad"),
                            City = "",
                            CreatedAt = new DateTime(2019, 10, 29, 7, 49, 48, 586, DateTimeKind.Utc).AddTicks(9796),
                            Email = "user3@o2.pl",
                            FirstName = "Paweł",
                            HouseNumber = "",
                            Password = "pass",
                            Pesel = "",
                            PhoneNumber = "",
                            PostCode = "",
                            Role = "doctor",
                            SecondName = "Szczery",
                            Street = ""
                        },
                        new
                        {
                            Id = new Guid("bf2878a5-cc9f-4695-adfc-3a8120bb7b53"),
                            City = "",
                            CreatedAt = new DateTime(2019, 10, 29, 7, 49, 48, 586, DateTimeKind.Utc).AddTicks(9798),
                            Email = "user4@o2.pl",
                            FirstName = "Andrzej",
                            HouseNumber = "",
                            Password = "pass",
                            Pesel = "",
                            PhoneNumber = "",
                            PostCode = "",
                            Role = "doctor",
                            SecondName = "Kosień",
                            Street = ""
                        });
                });

            modelBuilder.Entity("Clinic.API.Models.Nurse", b =>
                {
                    b.HasBaseType("Clinic.API.Models.User");

                    b.HasDiscriminator().HasValue("Nurse");
                });

            modelBuilder.Entity("Clinic.API.Models.Patient", b =>
                {
                    b.HasBaseType("Clinic.API.Models.User");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("Clinic.API.Models.Root", b =>
                {
                    b.HasBaseType("Clinic.API.Models.User");

                    b.HasDiscriminator().HasValue("Root");
                });

            modelBuilder.Entity("Clinic.API.Models.Appointment", b =>
                {
                    b.HasOne("Clinic.API.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId");

                    b.HasOne("Clinic.API.Models.MedOffice", "MedOffice")
                        .WithMany("Appointments")
                        .HasForeignKey("MedOfficeId");

                    b.HasOne("Clinic.API.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("Clinic.API.Models.Contract", b =>
                {
                    b.HasOne("Clinic.API.Models.Department", "Department")
                        .WithMany("Contracts")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Clinic.API.Models.Doctor", "Doctor")
                        .WithMany("Contracts")
                        .HasForeignKey("DoctorId");

                    b.HasOne("Clinic.API.Models.MedArea", "MedArea")
                        .WithMany("Contracts")
                        .HasForeignKey("MedAreaId");
                });

            modelBuilder.Entity("Clinic.API.Models.MedOffice", b =>
                {
                    b.HasOne("Clinic.API.Models.Department", "department")
                        .WithMany("MedOffices")
                        .HasForeignKey("departmentId");
                });

            modelBuilder.Entity("Clinic.API.Models.Prescription", b =>
                {
                    b.HasOne("Clinic.API.Models.Appointment", "Appointment")
                        .WithMany("Prescriptions")
                        .HasForeignKey("AppointmentId");

                    b.HasOne("Clinic.API.Models.Drug", "Drug")
                        .WithMany("Prescriptions")
                        .HasForeignKey("DrugId");
                });

            modelBuilder.Entity("Clinic.API.Models.Referral", b =>
                {
                    b.HasOne("Clinic.API.Models.Appointment", "Appointment")
                        .WithMany("Referrals")
                        .HasForeignKey("AppointmentId");

                    b.HasOne("Clinic.API.Models.Treatment", "Treatment")
                        .WithMany("Referrals")
                        .HasForeignKey("TreatmentId");
                });
#pragma warning restore 612, 618
        }
    }
}
